version: '2'
services:
  explore_ui:
    build:
      context: ./exploreui
    env_file:
      - ontology_manager.env
    ports:
      - "0.0.0.0:4200:4200"
    restart: always

  ontology_processors_api:
    build:
      context: ./ontology_processors_api
    env_file:
      - ontology_manager.env
    volumes:
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/ontology_broker:/usr/src/app/logs
    ports:
      - "0.0.0.0:3000:3000"
    restart: always

  ontology_broker:
    build: 
      context: ./ontology_broker
    env_file:
      - ontology_manager.env
    volumes:
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/ontology_broker:/usr/src/app/logs
    depends_on:
      - graphdb
      - mongodb
      - rabbitmq
      - mongosetup
    restart: always
  
  concept_processor:
    build: ./ontology_processors/concept-processor
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs      
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  questions_processor:
    build: ./ontology_processors/question-processor
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs      
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always 

  content_processor:
    build: ./ontology_processors/media-content-processor
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  user_processor:
    build: ./ontology_processors/user-processor
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  learner_state_processor:
    build: ./ontology_processors/learner-state-processor
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  learning_resource_processor:
    build: ./ontology_processors/learning-resource-processor
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  # wait:
  #   image: jainnish94/wait-for-it
  #   volumes:
  #     - ./wait-for-it:/dependencies
  #   env_file:
  #     - ontology_manager.env
  #   links:
  #     - graphdb
  #     - mongodb
  #     - rabbitmq
  #     - mongosetup
  
  course_processor:
    build: ./ontology_processors/course-processor
    env_file:
      - ontology_manager.env
    volumes:
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/concept_processor:/usr/src/app/logs
    depends_on:
      - ontology_broker
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  node_factory:
    build: ./ontology_processors/node-factory
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/node_factory:/usr/src/app/logs      
    depends_on:
      - concept_processor
    links:
      - graphdb
      - mongodb
      - rabbitmq
    restart: always

  relation_factory:
    build: ./ontology_processors/relation-factory
    env_file:
      - ontology_manager.env
    volumes: 
      - ./amqp_utils:/usr/src/app/amqp_utils
      - ./neo4j_utils:/usr/src/app/neo4j_utils
      - ./sro_utils:/usr/src/app/sro_utils
      - ./logs/relation_factory:/usr/src/app/logs      
    depends_on:
      - concept_processor
    links: 
      - graphdb
      - mongodb
      - rabbitmq
    restart: always
  
  graphdb:
    image: neo4j:latest
    environment:
     - NEO4J_AUTH=neo4j/password
     - NEO4J_CACHE_MEMORY=1G
     - NEO4J_dbms_security_procedures_unrestricted=apoc.*
     - NEO4J_dbms_memory_pagecache_size=4G
    volumes:
     - ./db/dbms:/data/dbms
     - ./plugins:/plugins
     - ./logs/graphdb:/logs
    ports:
     - "7474:7474"
     - "7687:7687"
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    restart: always

  mongodb:
    image: mongo:latest
    hostname: mongodb
    entrypoint: ["/usr/bin/mongod", "--replSet", "rs"]
    ports:
     - "27017:27017"
     - "28017:28017"
    restart: always
    
  mongosetup:
    image: mongo:latest
    depends_on:
     - mongodb
    volumes:
     - ./scripts:/scripts
     - ./dump:/dump
     - ./dump_backup_2:/dump_backup_2
    entrypoint: ["scripts/mongosetup.sh"]

  rabbitmq:
    image: rabbitmq:management
    ports:
     - "5672:5672"
     - "15672:15672"
    restart: always

  nginx:
    image: nginx
    network_mode: host
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - ontology_processors_api
      - rabbitmq
      - graphdb
      - explore_ui
    restart: always

  meta-api:
    build: ./meta-api
    env_file:
      - ontology_manager.env
    environment:
      - PORT=3001
    ports:
      - "3001:3001"
    restart: always
  
  meta-client:
    build: ./meta-client
    ports:
      - "0.0.0.0:4201:4201"
    restart: always

  elasticsearch:
    image: elasticsearch
    environment:
      - LOGSPOUT=ignore
    ports:
      - "9200:9200"
      - "9300:9300"

  logstash:
    image: logstash:alpine
    command: -f /etc/logstash.conf
    volumes:
      - ./logstash.conf:/etc/logstash.conf
    ports:
      - "5000:5000"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - LOGSPOUT=ignore
    links:
      - elasticsearch

  logspout:
    build: ./logspout
    environment:
      - ROUTE_URIS=logstash+tcp://logstash:5000
      - RETRY_COUNT=20
    ports:
      - "127.0.0.1:9000:80"
    links:
      - logstash
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kibana:
    image: kibana
    environment: 
      - LOGSPOUT=ignore
    links:
      - elasticsearch
    ports:
      - "5601:5601"

  cadvisor:
    image: google/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "9091:8080"
